// controllers/userController.js
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcrypt');
const User = require('../Models/User');
const UserType = require('../Models/UserType');

// Signup function
const signup = async (req, res) => {
  try {
    const { name, username, password, user_type } = req.body;



    if (user_type > 2) {
      return res.status(400).json({ error: 'Invalid user type' });
    }

    // // Check if username already exists
    // const existingUser = await User.findOne({ username });
    // if (existingUser) {
    //   return res.status(400).json({ error: 'Username already taken' });
    // }

    // Generate unique user ID and hash the password
    const userId = uuidv4();
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create new user
    const newUser =  await User.create({
      user_id: userId,
      user_type,
      name,
      username,
      password: hashedPassword,
    });

    // Save user to the database
  console.log(newUser);

    res.status(201).json({ message: 'User created successfully', user_id: newUser.user_id });
  } catch (error) {
    res.status(500).json({ error: 'Failed to create user', details: error.message });
  }
};

module.exports = {
  signup,
};
const mongoose = require('mongoose');

const lifeSkillSchema = new mongoose.Schema({
  lifeskill_id: {
    type: String,
    required: true,
  },
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
});

const LifeSkill = mongoose.model('LifeSkill', lifeSkillSchema);

module.exports = LifeSkill;
const LifeSkillType = Object.freeze({
    SOFT_SKILLS: 0,
    TECHNICAL_SKILLS: 1,
    LIFE_MANAGEMENT: 2,
    
  });
  
  module.exports = LifeSkillType;
  
const mongoose = require('mongoose');

const messageSchema = new mongoose.Schema({
  sender_id: {
    type: String,
    required: true,
  },
  timestamp: {
    type: Date,
    default: Date.now,
  },
  body: {
    type: String,
    required: true,
  },
});

const Message = mongoose.model('Message', messageSchema);

module.exports = Message;
const NotificationLevel = Object.freeze({
    LOW: 0,
    MEDIUM: 1,
    HIGH: 2,
  });
  
  module.exports = NotificationLevel;
  
const mongoose = require('mongoose');
const NotificationLevel = require('./NotificationLevel');
const NotificationType = require('./NotificationType');

const notificationSchema = new mongoose.Schema({
  sender_id: {
    type: String,
    required: true,
  },
  timestamp: {
    type: Date,
    default: Date.now,
  },
  notification_level: {
    type: Number,
    required: true,
    enum: Object.values(NotificationLevel),
  },
  notification_type: {
    type: String,
    required: true,
    enum: Object.values(NotificationType),
  },
});

const Notification = mongoose.model('Notification', notificationSchema);

module.exports = Notification;
const NotificationType = Object.freeze({
    HOUSING: 'HOUSING',
    FOOD: 'FOOD',
    VERIFICATION: 'VERIFICATION',
    OTHER: 'OTHER',
  });
  
  module.exports = NotificationType;
  
const mongoose = require('mongoose');
const UserType = require('./UserType');

const userSchema = new mongoose.Schema({
  user_id: {
    type: String,
    required: true,
    unique: true,
  },
  user_type: {
    type: Number,
    required: true,
    enum: Object.values(UserType),
  },
  name: {
    type: String,
    required: true,
  },
  username: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
});


const User = mongoose.model('User', userSchema);

module.exports = User;
const UserType = Object.freeze({
  ADMIN: 0,
  MENTOR: 1,
  MENTEE: 2,
});

module.exports = {
  UserType,
};
// routes/userRoutes.js
const express = require('express');
const { signup } = require('../Controllers/userControllers');

const router = express.Router();

// Route to handle user signup
router.post('/signup', signup);

module.exports = router;
const express = require('express');
const mongoose = require('mongoose');
const userRoutes = require('./routes/userRoutes'); 
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 8000;

// Middleware
app.use(express.json());

// MongoDB connection
const MONGO_URI = process.env.MONGO_URI
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected successfully'))
.catch((err) => console.error('MongoDB connection error:', err));

// Routes
app.get('/', (req, res) => {
  res.send('Hello from the server!');
});

app.use('/', userRoutes);


// Start server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`)
});
import React from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@mui/material';
import { Error } from '@mui/icons-material';
import '../App.css'; 

const EmergencyBanner = () => {
  return (
    <Button
      variant="contained"
      color="error"
      startIcon={<Error />}
      component={Link}
      to="/emergency"
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        backgroundColor: 'var(--color-secondary)', 
        color: 'var(--color-secondary)', 
        padding: '15px 0',
        fontSize: '18px',
        fontWeight: 'bold',
        border: '4px solid',
        borderColor: 'var(--color-primary)', 
        textAlign: 'center',
        zIndex: 1000, 
        '&:hover': {
          backgroundColor: 'var(--color-primary)', 
        }
      }}
    >
      <Error sx={{ marginRight: '10px' }} /> Click Here for Emergency
    </Button>
  );
};

export default EmergencyBanner;
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { BottomNavigation, BottomNavigationAction } from '@mui/material';
import { Home, Chat, EmojiPeople, DateRange, ContactPhone } from '@mui/icons-material';

const Navbar = () => {
  const [value, setValue] = React.useState(0);
  const navigate = useNavigate();

  const handleChange = (event, newValue) => {
    setValue(newValue);
    switch(newValue) {
      case 0:
        navigate('/');
        break;
      case 1:
        navigate('/chat');
        break;
      case 2:
        navigate('/lifeskills');
        break;
      case 3:
        navigate('/calendar');
        break;
      case 4:
        navigate('/contact');
        break;
      default:
        break;
    }
  };

  return (
    <BottomNavigation
      value={value}
      onChange={handleChange}
      showLabels
      sx={{
        width: '100%',
        position: 'fixed',
        bottom: 0,
      }}
    >
      <BottomNavigationAction label="Home" icon={<Home />} />
      <BottomNavigationAction label="Chat" icon={<Chat />} />
      <BottomNavigationAction label="Life Skills" icon={<EmojiPeople />} />
      <BottomNavigationAction label="Calendar" icon={<DateRange />} />
      <BottomNavigationAction label="Contact" icon={<ContactPhone />} />
    </BottomNavigation>
  );
};

export default Navbar;
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Grid,
  Paper,
  IconButton,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
} from '@mui/material';
import { 
  ChevronLeft, 
  ChevronRight, 
  Add as AddIcon
} from '@mui/icons-material';

const Calendar = ({ userRole }) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [events, setEvents] = useState({});
  const [openEventDialog, setOpenEventDialog] = useState(false);
  const [openEventDetailsDialog, setOpenEventDetailsDialog] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [newEvent, setNewEvent] = useState({ title: '', description: '', date: '', time: '' });

  const isAdminOrMentor = userRole === 'admin' || userRole === 'mentor';

  // Sample events
  useEffect(() => {
    const sampleEvents = {
      '2024-10-20': [
        { title: 'Team Meeting', time: '10:00 AM', color: '#4285F4', description: 'Discuss project progress' },
        { title: 'Lunch with Sarah', time: '12:30 PM', color: '#0F9D58', description: 'At the new Italian restaurant' }
      ],
      '2024-10-21': [
        { title: 'Project Deadline', time: '09:00 AM', color: '#DB4437', description: 'Submit final report' }
      ],
      '2024-10-23': [
        { title: 'Yoga Class', time: '06:00 PM', color: '#F4B400', description: 'Remember to bring your mat' }
      ],
      '2024-10-25': [
        { title: 'Dentist Appointment', time: '02:00 PM', color: '#4285F4', description: 'Annual check-up' },
        { title: 'Movie Night', time: '08:00 PM', color: '#0F9D58', description: 'Watch the new superhero movie' }
      ]
    };
    setEvents(sampleEvents);
  }, []);

  const getWeekDates = (date) => {
    const week = [];
    for (let i = 0; i < 7; i++) {
      const day = new Date(date);
      day.setDate(date.getDate() + i);
      week.push(day);
    }
    return week;
  };

  const weekDates = getWeekDates(currentDate);

  const handlePrevWeek = () => {
    const newDate = new Date(currentDate);
    newDate.setDate(currentDate.getDate() - 7);
    setCurrentDate(newDate);
  };

  const handleNextWeek = () => {
    const newDate = new Date(currentDate);
    newDate.setDate(currentDate.getDate() + 7);
    setCurrentDate(newDate);
  };

  const handleAddEvent = () => {
    if (isAdminOrMentor) {
      setOpenEventDialog(true);
    }
  };

  const handleCloseEventDialog = () => {
    setOpenEventDialog(false);
    setNewEvent({ title: '', description: '', date: '', time: '' });
  };

  const handleSaveEvent = () => {
    const eventDate = new Date(newEvent.date);
    const eventKey = `${eventDate.getFullYear()}-${eventDate.getMonth() + 1}-${eventDate.getDate()}`;
    const formattedTime = formatTime(newEvent.time);
    setEvents(prevEvents => ({
      ...prevEvents,
      [eventKey]: [...(prevEvents[eventKey] || []), { ...newEvent, time: formattedTime, color: '#4285F4' }]
    }));
    handleCloseEventDialog();
  };

  const handleEventClick = (event) => {
    setSelectedEvent(event);
    setOpenEventDetailsDialog(true);
  };

  const handleCloseEventDetailsDialog = () => {
    setOpenEventDetailsDialog(false);
    setSelectedEvent(null);
  };

  const formatTime = (time) => {
    const [hours, minutes] = time.split(':');
    const hour = parseInt(hours);
    const ampm = hour >= 12 ? 'PM' : 'AM';
    const formattedHour = hour % 12 || 12;
    return `${formattedHour}:${minutes} ${ampm}`;
  };

  const parseTime = (timeString) => {
    const [time, period] = timeString.split(' ');
    let [hours, minutes] = time.split(':');
    hours = parseInt(hours);
    if (period === 'PM' && hours !== 12) {
      hours += 12;
    } else if (period === 'AM' && hours === 12) {
      hours = 0;
    }
    return { hours, minutes };
  };

  const renderWeekView = () => {
    const hours = Array.from({ length: 24 }, (_, i) => i);

    return (
      <Box sx={{ display: 'flex', height: 'calc(100vh - 150px)', overflowY: 'auto' }}>
        <Box sx={{ width: '80px', flexShrink: 0 }}>
          {hours.map(hour => (
            <Box key={hour} sx={{ height: '60px', borderBottom: '1px solid #e0e0e0', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <Typography variant="caption">{formatTime(`${hour}:00`)}</Typography>
            </Box>
          ))}
        </Box>
        <Box sx={{ display: 'flex', flexGrow: 1 }}>
          {weekDates.map((date, index) => {
            const dateKey = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
            const dayEvents = events[dateKey] || [];

            return (
              <Box key={index} sx={{ flexGrow: 1, borderLeft: '1px solid #e0e0e0' }}>
                {hours.map(hour => (
                  <Box key={hour} sx={{ height: '60px', borderBottom: '1px solid #e0e0e0', position: 'relative' }}>
                    {dayEvents
                      .filter(event => {
                        const { hours: eventHour } = parseTime(event.time);
                        return eventHour === hour;
                      })
                      .map((event, eventIndex) => (
                        <Paper
                          key={eventIndex}
                          onClick={() => handleEventClick(event)}
                          sx={{
                            position: 'absolute',
                            top: '0',
                            left: '2px',
                            right: '2px',
                            height: '58px',
                            backgroundColor: event.color,
                            color: 'white',
                            padding: '2px',
                            overflow: 'hidden',
                            cursor: 'pointer',
                          }}
                        >
                          <Typography variant="caption">{event.time}</Typography>
                          <Typography variant="body2" noWrap>{event.title}</Typography>
                        </Paper>
                      ))}
                  </Box>
                ))}
              </Box>
            );
          })}
        </Box>
      </Box>
    );
  };

  return (
    <Box sx={{ p: 3, backgroundColor: '#f5f5f5', height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
        <Typography variant="h4" sx={{ color: '#8e44ad' }}>
          {`${weekDates[0].toLocaleDateString('default', { month: 'long', day: 'numeric' })} - ${weekDates[6].toLocaleDateString('default', { month: 'long', day: 'numeric', year: 'numeric' })}`}
        </Typography>
        <Box>
          <IconButton onClick={handlePrevWeek} sx={{ color: '#8e44ad' }}>
            <ChevronLeft />
          </IconButton>
          <IconButton onClick={handleNextWeek} sx={{ color: '#8e44ad' }}>
            <ChevronRight />
          </IconButton>
          {isAdminOrMentor && (
            <Button
              startIcon={<AddIcon />}
              onClick={handleAddEvent}
              sx={{ 
                ml: 2, 
                backgroundColor: '#f1c40f', 
                color: '#000',
                '&:hover': { backgroundColor: '#f39c12' }
              }}
            >
              Add Event
            </Button>
          )}
        </Box>
      </Box>

      <Grid container spacing={1} sx={{ mb: 2 }}>
        {weekDates.map((date, index) => (
          <Grid item xs key={index}>
            <Typography variant="subtitle2" align="center" sx={{ fontWeight: 'bold', color: '#8e44ad' }}>
              {date.toLocaleDateString('default', { weekday: 'short' })}
            </Typography>
            <Typography variant="body2" align="center">
              {date.getDate()}
            </Typography>
          </Grid>
        ))}
      </Grid>

      {renderWeekView()}

      <Dialog open={openEventDialog} onClose={handleCloseEventDialog}>
        <DialogTitle>Add New Event</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Event Title"
            type="text"
            fullWidth
            value={newEvent.title}
            onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Event Description"
            type="text"
            fullWidth
            multiline
            rows={4}
            value={newEvent.description}
            onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Event Date"
            type="date"
            fullWidth
            InputLabelProps={{ shrink: true }}
            value={newEvent.date}
            onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Event Time"
            type="time"
            fullWidth
            InputLabelProps={{ shrink: true }}
            value={newEvent.time}
            onChange={(e) => setNewEvent({ ...newEvent, time: e.target.value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseEventDialog} sx={{ color: '#8e44ad' }}>Cancel</Button>
          <Button onClick={handleSaveEvent} sx={{ backgroundColor: '#f1c40f', color: '#000' }}>Save</Button>
        </DialogActions>
      </Dialog>

      <Dialog open={openEventDetailsDialog} onClose={handleCloseEventDetailsDialog}>
        <DialogTitle>{selectedEvent?.title}</DialogTitle>
        <DialogContent>
          <Typography variant="body1">Time: {selectedEvent?.time}</Typography>
          <Typography variant="body1" sx={{ mt: 2 }}>Description: {selectedEvent?.description}</Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseEventDetailsDialog} sx={{ color: '#8e44ad' }}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Calendar;
import React, { useState, useRef, useEffect } from 'react';
import { 
  Box, 
  AppBar, 
  Toolbar, 
  Typography, 
  Drawer, 
  List, 
  ListItem, 
  ListItemText, 
  ListItemAvatar,
  Avatar,
  IconButton, 
  TextField, 
  Button,
  Grid,
  Paper
} from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import SendIcon from '@mui/icons-material/Send';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import VideocamIcon from '@mui/icons-material/Videocam';
import CallEndIcon from '@mui/icons-material/CallEnd';

const ChatRoom = () => {
  const [channels, setChannels] = useState(['General', 'Mentors', 'Local Area']);
  const [selectedChannel, setSelectedChannel] = useState(null);
  const [messages, setMessages] = useState({
    General: [],
    Mentors: [],
    'Local Area': []
  });
  const [newMessage, setNewMessage] = useState('');
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [isInVideoCall, setIsInVideoCall] = useState(false);
  const messagesEndRef = useRef(null);
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const [peerConnection, setPeerConnection] = useState(null);
  const [localStream, setLocalStream] = useState(null);

  // Mock data for mentors and friends
  const contacts = [
    { id: 1, name: 'Mentor Sarah', type: 'mentor', avatar: '/api/placeholder/40/40' },
    { id: 2, name: 'Friend John', type: 'friend', avatar: '/api/placeholder/40/40' },
    { id: 3, name: 'Mentor Mike', type: 'mentor', avatar: '/api/placeholder/40/40' },
    { id: 4, name: 'Friend Emma', type: 'friend', avatar: '/api/placeholder/40/40' },
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages]);

  useEffect(() => {
    if (isInVideoCall) {
      initializeWebRTC();
    } else {
      cleanupWebRTC();
    }
  }, [isInVideoCall]);

  const initializeWebRTC = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      setLocalStream(stream);
      if (localVideoRef.current) {
        localVideoRef.current.srcObject = stream;
      }

      const pc = new RTCPeerConnection();
      setPeerConnection(pc);

      stream.getTracks().forEach(track => pc.addTrack(track, stream));

      pc.ontrack = (event) => {
        if (remoteVideoRef.current) {
          remoteVideoRef.current.srcObject = event.streams[0];
        }
      };

      pc.onicecandidate = (event) => {
        if (event.candidate) {
          // Send the candidate to the remote peer
          // You'll need to implement signaling here
        }
      };

      // Create and send an offer
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);

      // Send the offer to the remote peer
      // You'll need to implement signaling here

    } catch (error) {
      console.error("Error initializing WebRTC:", error);
    }
  };

  const cleanupWebRTC = () => {
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
    }
    if (peerConnection) {
      peerConnection.close();
    }
    setLocalStream(null);
    setPeerConnection(null);
  };

  const handleSendMessage = () => {
    if (newMessage.trim() !== '' && selectedChannel) {
      setMessages(prevMessages => ({
        ...prevMessages,
        [selectedChannel]: [...prevMessages[selectedChannel], { text: newMessage, sender: 'You' }]
      }));
      setNewMessage('');
    }
  };

  const toggleDrawer = (open) => (event) => {
    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {
      return;
    }
    setDrawerOpen(open);
  };

  const handleContactClick = (contact) => {
    // For now, just navigate to the General channel
    setSelectedChannel('General');
  };

  const startVideoCall = () => {
    setIsInVideoCall(true);
  };

  const endVideoCall = () => {
    setIsInVideoCall(false);
  };

  const renderLandingPage = () => (
    <Box sx={{ p: 2 }}>
      <Typography variant="h6" sx={{ mb: 2 }}>Your Connections</Typography>
      <Grid container spacing={2}>
        {contacts.map((contact) => (
          <Grid item xs={6} key={contact.id}>
            <Paper 
              elevation={3} 
              sx={{ 
                p: 2, 
                display: 'flex', 
                flexDirection: 'column', 
                alignItems: 'center',
                cursor: 'pointer',
                '&:hover': { backgroundColor: '#f0f0f0' }
              }}
              onClick={() => handleContactClick(contact)}
            >
              <Avatar src={contact.avatar} sx={{ width: 60, height: 60, mb: 1 }} />
              <Typography variant="subtitle1">{contact.name}</Typography>
              <Typography variant="body2" color="textSecondary">{contact.type}</Typography>
            </Paper>
          </Grid>
        ))}
      </Grid>
      <Button 
        fullWidth 
        variant="contained" 
        sx={{ mt: 2, backgroundColor: '#8e44ad', '&:hover': { backgroundColor: '#732d91' } }}
        onClick={() => setSelectedChannel('General')}
      >
        Enter General Chat
      </Button>
    </Box>
  );

  const renderChatRoom = () => (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: 'calc(100vh - 112px)' }}>
      {isInVideoCall && (
        <Box sx={{ display: 'flex', justifyContent: 'space-between', p: 2, backgroundColor: '#000', height: '50%' }}>
          <video ref={localVideoRef} autoPlay muted style={{ width: '48%', height: '100%', objectFit: 'cover' }} />
          <video ref={remoteVideoRef} autoPlay style={{ width: '48%', height: '100%', objectFit: 'cover' }} />
        </Box>
      )}
      <Box sx={{ 
        flexGrow: 1, 
        overflow: 'auto', 
        p: 2, 
        backgroundColor: '#f5f5f5',
        display: 'flex',
        flexDirection: 'column',
      }}>
        {messages[selectedChannel].map((msg, index) => (
          <Box key={index} sx={{ mb: 1, p: 1, backgroundColor: '#fff', borderRadius: 1, alignSelf: msg.sender === 'You' ? 'flex-end' : 'flex-start', maxWidth: '80%' }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 'bold' }}>{msg.sender}</Typography>
            <Typography variant="body1">{msg.text}</Typography>
          </Box>
        ))}
        <div ref={messagesEndRef} />
      </Box>

      <Box sx={{ 
        p: 2, 
        backgroundColor: '#fff', 
        borderTop: '1px solid #e0e0e0',
        display: 'flex',
        alignItems: 'center'
      }}>
        <TextField
          fullWidth
          variant="outlined"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type a message..."
          sx={{ mr: 1 }}
          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
        />
        <Button 
          variant="contained" 
          onClick={handleSendMessage}
          sx={{ 
            backgroundColor: '#8e44ad', 
            '&:hover': { backgroundColor: '#732d91' },
            mr: 1
          }}
        >
          <SendIcon />
        </Button>
        <Button
          variant="contained"
          color={isInVideoCall ? "error" : "primary"}
          onClick={isInVideoCall ? endVideoCall : startVideoCall}
          sx={{ minWidth: 'auto' }}
        >
          {isInVideoCall ? <CallEndIcon /> : <VideocamIcon />}
        </Button>
      </Box>
    </Box>
  );

  return (
    <Box sx={{ 
      flexGrow: 1, 
      height: '100vh', 
      display: 'flex', 
      flexDirection: 'column',
    }}>
      <AppBar position="static" sx={{ backgroundColor: '#f1c40f' }}>
        <Toolbar>
          {selectedChannel ? (
            <IconButton
              size="large"
              edge="start"
              color="inherit"
              aria-label="back"
              sx={{ mr: 2 }}
              onClick={() => setSelectedChannel(null)}
            >
              <ArrowBackIcon />
            </IconButton>
          ) : (
            <IconButton
              size="large"
              edge="start"
              color="inherit"
              aria-label="menu"
              sx={{ mr: 2 }}
              onClick={toggleDrawer(true)}
            >
              <MenuIcon />
            </IconButton>
          )}
          <Typography variant="h6" component="div" sx={{ flexGrow: 1, color: '#000' }}>
            {selectedChannel || 'Chat Home'}
          </Typography>
        </Toolbar>
      </AppBar>

      <Drawer
        anchor="left"
        open={drawerOpen}
        onClose={toggleDrawer(false)}
      >
        <Box
          sx={{ width: 250 }}
          role="presentation"
          onClick={toggleDrawer(false)}
          onKeyDown={toggleDrawer(false)}
        >
          <List>
            {channels.map((channel) => (
              <ListItem button key={channel} onClick={() => setSelectedChannel(channel)}>
                <ListItemText primary={channel} />
              </ListItem>
            ))}
          </List>
        </Box>
      </Drawer>

      {selectedChannel ? renderChatRoom() : renderLandingPage()}
    </Box>
  );
};

export default ChatRoom;
import React from 'react';
import { Container, Grid, Paper, Typography, Box, Button } from '@mui/material';
import { Home, Restaurant, Security, Help } from '@mui/icons-material';

const ContactBox = ({ title, icon, phone, email, color }) => (
  <Paper elevation={3} sx={{ p: 3, height: '100%', backgroundColor: color, color: 'white' }}>
    <Box display="flex" flexDirection="column" height="100%">
      <Box display="flex" alignItems="center" mb={2}>
        {icon}
        <Typography variant="h5" component="h2" ml={1}>
          {title}
        </Typography>
      </Box>
      <Typography variant="body1" mb={2}>
        Phone: {phone}
      </Typography>
      <Typography variant="body1" mb={2}>
        Email: {email}
      </Typography>
      <Button variant="contained" color="inherit" sx={{ mt: 'auto', color: color }}>
        Contact Now
      </Button>
    </Box>
  </Paper>
);

const Contact = () => {
  const contacts = [
    { title: 'Housing', icon: <Home fontSize="large" />, phone: '(123) 456-7890', email: 'housing@example.com', color: '#4CAF50' },
    { title: 'Food', icon: <Restaurant fontSize="large" />, phone: '(234) 567-8901', email: 'food@example.com', color: '#FFA000' },
    { title: 'Assault', icon: <Security fontSize="large" />, phone: '(345) 678-9012', email: 'assault@example.com', color: '#F44336' },
    { title: 'Other', icon: <Help fontSize="large" />, phone: '(456) 789-0123', email: 'other@example.com', color: '#2196F3' },
  ];

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h3" component="h1" gutterBottom textAlign="center" mb={4}>
        Contact Information
      </Typography>
      <Grid container spacing={4}>
        {contacts.map((contact, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <ContactBox {...contact} />
          </Grid>
        ))}
      </Grid>
    </Container>
  );
};

export default Contact;
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { TextField, Button, Select, MenuItem, InputLabel, FormControl, Container, Typography } from '@mui/material';
import '../styles/App.css';

const EmergencyContact = () => {
  const [formData, setFormData] = useState({
    first_name: '', 
    last_name: '', 
    email: '',
    phone: '',
    message: '',
    category: '',
    otherCategory: '',
  });

  const [errors, setErrors] = useState({
    phone: '',
  });

  const navigate = useNavigate(); 

  const handleChange = (event) => {
    const { name, value } = event.target;

    if (name === 'phone') {
      const phoneRegex = /^\(?([0-9]{3})\)?[-.●]?([0-9]{3})[-.●]?([0-9]{4})$/; 
      if (!phoneRegex.test(value)) {
        setErrors((prevErrors) => ({ ...prevErrors, phone: 'Invalid phone number' }));
      } else {
        setErrors((prevErrors) => ({ ...prevErrors, phone: '' }));
      }
    }

    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!errors.phone) {
      console.log(formData);
      // Navigate to confirmation page
      navigate('/confirmation');
    } else {
      alert('Please fix the errors before submitting');
    }
  };

  return (
    <Container
      maxWidth="sm"
      className="primary-background" 
    >
      <Typography variant="h4" gutterBottom>
        Emergency Contact Form
      </Typography>
      <Typography variant="body1" paragraph>
        Please fill out your emergency message and select the relevant category.
      </Typography>

      <form onSubmit={handleSubmit}>
        {/* First Name Input */}
        <TextField
          label="First Name"
          name="first_name"
          value={formData.first_name}
          onChange={handleChange}
          fullWidth
          margin="normal"
          variant="outlined"
          required
          size="small"
        />

        {/* Last Name Input */}
        <TextField
          label="Last Name"
          name="last_name"
          value={formData.last_name}
          onChange={handleChange}
          fullWidth
          margin="normal"
          variant="outlined"
          required
          size="small"
        />

        {/* Email Input */}
        <TextField
          label="Email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          fullWidth
          margin="normal"
          variant="outlined"
          required
          size="small"
        />

        {/* Phone Number Input */}
        <TextField
          label="Phone Number"
          name="phone"
          value={formData.phone}
          onChange={handleChange}
          fullWidth
          margin="normal"
          variant="outlined"
          required
          size="small"
          error={!!errors.phone} // Show error if there's an error
          helperText={errors.phone && errors.phone} // Display error message
        />

        {/* Message Input */}
        <TextField
          label="Message"
          name="message"
          value={formData.message}
          onChange={handleChange}
          fullWidth
          margin="normal"
          variant="outlined"
          required
          multiline
          rows={3}
          size="small"
          sx={{
            maxHeight: '100px',
            overflow: 'auto',
          }}
        />

        {/* Category dropdown */}
        <FormControl fullWidth margin="normal" variant="outlined" size="small">
          <InputLabel id="category-label">Category</InputLabel>
          <Select
            labelId="category-label"
            name="category"
            value={formData.category}
            onChange={handleChange}
            label="Category"
            required
          >
            <MenuItem value="housing">Housing</MenuItem>
            <MenuItem value="food">Food</MenuItem>
            <MenuItem value="unaccompanied_minor">Unaccompanied Minor</MenuItem>
            <MenuItem value="assault">Assault</MenuItem>
            <MenuItem value="other">Other</MenuItem>
          </Select>
        </FormControl>

        {/* if other selected, they can input text */}
        {formData.category === 'other' && (
          <TextField
            label="Please specify"
            name="otherCategory"
            value={formData.otherCategory}
            onChange={handleChange}
            fullWidth
            margin="normal"
            variant="outlined"
            required
            size="small"
          />
        )}

        <Button
          type="submit"
          variant="contained"
          color="primary"
          fullWidth
          sx={{ mt: 2 }}
        >
          Submit
        </Button>
      </form>
    </Container>
  );
};

export default EmergencyContact;
import React from 'react';
import { Link } from 'react-router-dom';
import { Button, Typography, Container } from '@mui/material';
import EmergencyButton from '../components/EmergencyButton';

const LandingPage = () => {
  return (
    <Container maxWidth="sm" sx={{ marginTop: '80px' }}>
      <EmergencyButton />
      <Typography variant="h2" component="h1" gutterBottom>
        Welcome to Support App
      </Typography>
      <Typography variant="body1" paragraph>
        Get the support you need, when you need it.
      </Typography>
      <Button variant="contained" color="primary" component={Link} to="/signin">
        Sign In
      </Button>
      <Button variant="outlined" color="primary" component={Link} to="/register" sx={{ marginLeft: '10px' }}>
        Sign Up
      </Button>
    </Container>
  );
};

export default LandingPage;
import React, { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom'; // Import useNavigate
import '../styles/App.css';
import emailjs from '@emailjs/browser';

const Register = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
  });

  const form = useRef(); // Reference for the form
  const navigate = useNavigate(); // Initialize useNavigate

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const sendEmail = (e) => {
    e.preventDefault();
    console.log(process.env.REACT_APP_EMAILJS_SERVICE_ID);
    emailjs
      .sendForm(
        process.env.REACT_APP_EMAILJS_SERVICE_ID,
        process.env.REACT_APP_EMAILJS_TEMPLATE_ID, 
        form.current, 
        process.env.REACT_APP_EMAILJS_PUBLIC_KEY
      )
      .then(
        () => {
          console.log('SUCCESS!');
          alert('Email sent successfully!');
        },
        (error) => {
          console.log('FAILED...', error.text);
          alert('Email sending failed...');
        }
      );
  };

  const handleSubmit = async (e) => {
    e.preventDefault(); // Prevent the default form submission

    console.log(formData.password); // Log the password for debugging

    // Check if passwords match
    if (formData.password !== formData.confirmPassword) {
        alert('Passwords do not match!');
        return; // Exit if passwords do not match
    }

    // Prepare the data to be sent
    const data = {
        name: "TEST",
        username: "TESTING", // Extract username
        password: "TESTING",    // Extract password
        user_type: 2
    };

    // TODO: FIXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXx
    // Make the POST request to the MongoDB endpoint
    await fetch('http://localhost:8000/signup', {
        method: 'POST', // Specify the request method
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(data) // Convert the data to a JSON string
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok ' + response.statusText);
        }
        return response.json(); // Parse the response as JSON
    })
    .then(data => {
        console.log('Success:', data); // Handle the success response
        alert('Signup successful!'); // Alert user on success
    })
    .catch((error) => {
        console.error('Error:', error); // Handle any errors
        alert('Signup failed. Please try again.'); // Alert user on failure
    });
};

  return (
    <div style={{ maxWidth: '400px', margin: '0 auto', padding: '20px' }}>
      <h2>Register</h2>
      <form ref={form} onSubmit={handleSubmit}>
        <div style={{ marginBottom: '10px' }}>
          <label>Username:</label>
          <input
            type="text"
            name="username"
            value={formData.username}
            onChange={handleChange}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '10px' }}>
          <label>Email:</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '10px' }}>
          <label>Password:</label>
          <input
            type="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '10px' }}>
          <label>Confirm Password:</label>
          <input
            type="password"
            name="confirmPassword"
            value={formData.confirmPassword}
            onChange={handleChange}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <button type="submit" style={{ padding: '10px', width: '100%' }}>
          Register
        </button>
      </form>
    </div>
  );
};

export default Register;
import React, { useState } from 'react';
import '../styles/App.css'
import { redirect } from 'react-router-dom';

const Logon = () => {
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    alert('Login Submitted!');
  };

  return (
    <div style={{ maxWidth: '400px', margin: '0 auto', padding: '20px' }}>
      <h2>Log in</h2>
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '10px' }}>
          <label>Username:</label>
          <input
            type="text"
            name="username"
            value={formData.username}
            onChange={handleChange}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '10px' }}>
          <label>Logon Code:</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <button type="submit" style={{ padding: '10px', width: '100%' }}>
          Log In
        </button>
      </form>
    </div>
  );
};

export default Logon;
export const validateEmail = (email) => {
    return String(email)
      .toLowerCase()
      .match(
        /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    );
};
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import LandingPage from './pages/LandingPage';
import SignIn from './pages/SignIn';
import Register from './pages/Register'
import ChatRoom from './pages/ChatRoom';
import EmergencyContact from './pages/EmergencyContact';
import LifeSkills from './pages/LifeSkills';
import Calendar from './pages/Calendar';
import Contact from './pages/Contact';
import Navbar from './components/Navbar';
import './styles/App.css';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={<LandingPage />} />
          <Route path="/signin" element={<SignIn />} />
          <Route path="/register" element={<Register />} />
          <Route path="/chat" element={<ChatRoom />} />
          <Route path="/emergency" element={<EmergencyContact />} />
          <Route path="/lifeskills" element={<LifeSkills />} />
          <Route path="/calendar" element={<Calendar />} />
          <Route path="/contact" element={<Contact />} />
        </Routes>
        <Navbar />
      </div>
    </Router>
  );
}

export default App;
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
export const validateEmail = (email) => {
    return String(email)
      .toLowerCase()
      .match(
        /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
      );
  };
